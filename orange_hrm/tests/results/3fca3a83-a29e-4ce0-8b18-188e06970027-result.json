{"name": "test_add_a_new_post", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\n  (Session info: chrome=127.0.6533.100)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7851F9632+30946]\n\t(No symbol) [0x00007FF7851AE3C9]\n\t(No symbol) [0x00007FF7850A6FDA]\n\t(No symbol) [0x00007FF78509F0B5]\n\t(No symbol) [0x00007FF7850901E9]\n\t(No symbol) [0x00007FF785091D62]\n\t(No symbol) [0x00007FF7850904CE]\n\t(No symbol) [0x00007FF78508FD41]\n\t(No symbol) [0x00007FF78508FC80]\n\t(No symbol) [0x00007FF78508DE84]\n\t(No symbol) [0x00007FF78508E29C]\n\t(No symbol) [0x00007FF7850AA041]\n\t(No symbol) [0x00007FF78513BA2E]\n\t(No symbol) [0x00007FF78511CA6A]\n\t(No symbol) [0x00007FF78513B041]\n\t(No symbol) [0x00007FF78511C813]\n\t(No symbol) [0x00007FF7850EA6E5]\n\t(No symbol) [0x00007FF7850EB021]\n\tGetHandleVerifier [0x00007FF78532F83D+1301229]\n\tGetHandleVerifier [0x00007FF78533BDB7+1351783]\n\tGetHandleVerifier [0x00007FF785332A03+1313971]\n\tGetHandleVerifier [0x00007FF78522DD06+245686]\n\t(No symbol) [0x00007FF7851B758F]\n\t(No symbol) [0x00007FF7851B3804]\n\t(No symbol) [0x00007FF7851B3992]\n\t(No symbol) [0x00007FF7851AA3EF]\n\tBaseThreadInitThunk [0x00007FFCD5E9257D+29]\n\tRtlUserThreadStart [0x00007FFCD65EAF28+40]", "trace": "self = <orange_hrm.tests.api.test_add_a_new_post.TestAddANewPost testMethod=test_add_a_new_post>\n\n    def setUp(self):\n        \"\"\"\n        This method initializes driver and loads config file.\n        \"\"\"\n        logging.info(\"----------------Test Started----------------\")\n        # ARRANGE\n        base_dir = os.path.dirname(os.path.abspath(__file__))\n        self._config_file_path = os.path.join(base_dir, '../../orange_hrm.json')\n        self._config = ConfigProvider().load_from_file(self._config_file_path)\n>       self._driver = BrowserWrapper().get_driver()\n\napi\\test_add_a_new_post.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\infra\\ui\\browser_wrapper.py:35: in get_driver\n    self._driver.get(url)\n..\\..\\..\\New_Library_Manager\\automation_bootcamp_final_project\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:363: in get\n    self.execute(Command.GET, {\"url\": url})\n..\\..\\..\\New_Library_Manager\\automation_bootcamp_final_project\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002358D76BB60>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_NAME_NOT_RESOLVED\\\\n  (...07FF7851AA3EF]\\\\n\\\\tBaseThreadInitThunk [0x00007FFCD5E9257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFCD65EAF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\nE         (Session info: chrome=127.0.6533.100)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7851F9632+30946]\nE       \t(No symbol) [0x00007FF7851AE3C9]\nE       \t(No symbol) [0x00007FF7850A6FDA]\nE       \t(No symbol) [0x00007FF78509F0B5]\nE       \t(No symbol) [0x00007FF7850901E9]\nE       \t(No symbol) [0x00007FF785091D62]\nE       \t(No symbol) [0x00007FF7850904CE]\nE       \t(No symbol) [0x00007FF78508FD41]\nE       \t(No symbol) [0x00007FF78508FC80]\nE       \t(No symbol) [0x00007FF78508DE84]\nE       \t(No symbol) [0x00007FF78508E29C]\nE       \t(No symbol) [0x00007FF7850AA041]\nE       \t(No symbol) [0x00007FF78513BA2E]\nE       \t(No symbol) [0x00007FF78511CA6A]\nE       \t(No symbol) [0x00007FF78513B041]\nE       \t(No symbol) [0x00007FF78511C813]\nE       \t(No symbol) [0x00007FF7850EA6E5]\nE       \t(No symbol) [0x00007FF7850EB021]\nE       \tGetHandleVerifier [0x00007FF78532F83D+1301229]\nE       \tGetHandleVerifier [0x00007FF78533BDB7+1351783]\nE       \tGetHandleVerifier [0x00007FF785332A03+1313971]\nE       \tGetHandleVerifier [0x00007FF78522DD06+245686]\nE       \t(No symbol) [0x00007FF7851B758F]\nE       \t(No symbol) [0x00007FF7851B3804]\nE       \t(No symbol) [0x00007FF7851B3992]\nE       \t(No symbol) [0x00007FF7851AA3EF]\nE       \tBaseThreadInitThunk [0x00007FFCD5E9257D+29]\nE       \tRtlUserThreadStart [0x00007FFCD65EAF28+40]\n\n..\\..\\..\\New_Library_Manager\\automation_bootcamp_final_project\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "description": "\n        This method tests adding a new post.\n        Test case: TC-10 / Add a new post.\n        ", "attachments": [{"name": "log", "source": "01e345ba-2229-4b79-b19e-5b7d9f0ea812-attachment.txt", "type": "text/plain"}], "start": 1723294064839, "stop": 1723294071376, "uuid": "9dad3a23-58b2-48c9-a7f7-03fc9ee96e67", "historyId": "930ac045b6b9a7004647ddd5807a11e4", "testCaseId": "930ac045b6b9a7004647ddd5807a11e4", "fullName": "api.test_add_a_new_post.TestAddANewPost#test_add_a_new_post", "labels": [{"name": "parentSuite", "value": "api"}, {"name": "suite", "value": "test_add_a_new_post"}, {"name": "subSuite", "value": "TestAddANewPost"}, {"name": "host", "value": "DESKTOP-DB3BQ5K"}, {"name": "thread", "value": "13396-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "api.test_add_a_new_post"}]}